# syntax=docker/dockerfile:1

ARG PYTHON_VERSION=3.12
FROM python:${PYTHON_VERSION}-slim as base

# Prevent Python from writing pyc files and keep Python from buffering
# stdout and stderr to avoid situations where the application crashes
# without emitting any logs due to buffering.
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1

# Create a non-privileged user that the app will run under.
# See https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#user
ARG UID=10001
RUN adduser \
    --disabled-password \
    --gecos "" \
    --home "/nonexistent" \
    --shell "/sbin/nologin" \
    --no-create-home \
    --uid "${UID}" \
    appuser

# Inform Docker that container listens this port at runtime
EXPOSE 8000

# Download dependencies as a separate step to take advantage of Docker's caching
# Leverage a cache mount to /root/.cache/pip to speed up subsequent builds.
# Leverage a bind mount to pyproject.toml to avoid having to copy it
RUN --mount=type=cache,target=/root/.cache/pip \
    --mount=type=bind,source=main_node/pyproject.toml,target=pyproject.toml \
    pip install $(python -c 'import tomllib; print(" ".join(tomllib.load(open("pyproject.toml", "rb"))["project"]["dependencies"]))')

# Install application to Python site-packages
# Do this after installing the dependencies to make rebuilding the image faster
# after introducing changes to application source code
RUN --mount=type=bind,readwrite,source=./,target=./source \
    pip install --editable ./source/main_node[dev] --no-deps

# Switch to the non-privileged user to run the application.
USER appuser

VOLUME "/source"

ENTRYPOINT ["uvicorn", "main_node.main:app", "--host", "0.0.0.0", "--port", "80", "--reload", "--reload-include", "/source"]
